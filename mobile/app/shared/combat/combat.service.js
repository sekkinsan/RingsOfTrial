"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var saver_1 = require("../../saver");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var room_component_1 = require("../../pages/room/room.component");
var CombatService = /** @class */ (function () {
    function CombatService(http, roomComponent, saveManager) {
        this.http = http;
        this.roomComponent = roomComponent;
        this.saveManager = saveManager;
        var combatArray = this.roomComponent.combatArray;
        var player = this.roomComponent.player;
        var enemy = this.roomComponent.enemy;
    }
    //for attack since attack isn't a spell..
    CombatService.prototype.damageDealt = function () {
        if (this.roomComponent.player.mana >= 0) {
            this.roomComponent.combatArray.push("You are about to use " + this.roomComponent.attack);
            this.roomComponent.enemy.health = this.roomComponent.enemy.health - 2;
            this.roomComponent.player.mana = this.roomComponent.player.mana - 0;
            this.roomComponent.combatArray.push("You dealt 2 damage");
            this.roomComponent.combatArray.push('You used 0 mana');
            this.damageReceived();
            this.failRoom();
        }
        else {
            this.roomComponent.combatArray.push("You don't have enough mana!");
        }
        console.log(JSON.stringify(this.roomComponent.combatArray));
        this.clearCombatArray();
        console.log(JSON.stringify(this.roomComponent.combatArray));
    };
    //for player spells, can refactor...
    CombatService.prototype.useSpell1 = function () {
        if (this.roomComponent.player.mana >= this.roomComponent.player.spells[0].mana) {
            this.roomComponent.combatArray.push("You are about to use " + this.roomComponent.player.spells[0].name);
            this.roomComponent.enemy.health = this.roomComponent.enemy.health - this.roomComponent.player.spells[0].damage;
            this.roomComponent.player.mana = this.roomComponent.player.mana - this.roomComponent.player.spells[0].mana;
            this.roomComponent.combatArray.push("You dealt " + this.roomComponent.player.spells[0].damage + " damage");
            this.roomComponent.combatArray.push("You used " + this.roomComponent.player.spells[0].mana + " mana");
            this.damageReceived();
            this.failRoom();
        }
        else {
            this.roomComponent.combatArray.push("You don't have enough mana!");
        }
        console.log(JSON.stringify(this.roomComponent.combatArray));
        this.clearCombatArray();
        console.log(JSON.stringify(this.roomComponent.combatArray));
    };
    CombatService.prototype.useSpell2 = function () {
        if (this.roomComponent.player.mana >= this.roomComponent.player.spells[1].mana) {
            this.roomComponent.combatArray.push("You are about to use " + this.roomComponent.player.spells[1].name);
            this.roomComponent.enemy.health = this.roomComponent.enemy.health - this.roomComponent.player.spells[1].damage;
            this.roomComponent.player.mana = this.roomComponent.player.mana - this.roomComponent.player.spells[1].mana;
            this.roomComponent.combatArray.push("You dealt " + this.roomComponent.player.spells[1].damage + " damage");
            this.roomComponent.combatArray.push("You used " + this.roomComponent.player.spells[1].mana + " mana");
            this.damageReceived();
            this.failRoom();
        }
        else {
            this.roomComponent.combatArray.push("You don't have enough mana!");
        }
        console.log(JSON.stringify(this.roomComponent.combatArray));
        this.clearCombatArray();
        console.log(JSON.stringify(this.roomComponent.combatArray));
    };
    CombatService.prototype.damageReceived = function () {
        if (this.roomComponent.enemy.health <= 0) {
            return this.clearRoom();
        }
        var enemySpell = this.roomComponent.getEnemySpell();
        this.roomComponent.combatArray.push("ENEMY CAST " + enemySpell.name);
        this.roomComponent.enemy.mana = this.roomComponent.enemy.mana - enemySpell.mana;
        this.roomComponent.player.health = this.roomComponent.player.health - enemySpell.damage;
        this.roomComponent.combatArray.push("You lost " + enemySpell.damage + " hp");
        console.log(JSON.stringify(this.roomComponent.combatArray));
    };
    CombatService.prototype.clearRoom = function () {
        if (this.roomComponent.enemy.health <= 0) {
            alert("YOU CLEARED THIS ROOM!");
        }
        this.roomComponent.cleared = true;
    };
    CombatService.prototype.failRoom = function () {
        if (this.roomComponent.player.health <= 0) {
            alert("YOU FAILED THIS ROOM!");
        }
        this.roomComponent.cleared = false;
    };
    CombatService.prototype.displayCombatArray = function () {
    };
    CombatService.prototype.clearCombatArray = function () {
        this.roomComponent.combatArray = [];
    };
    CombatService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http, room_component_1.RoomComponent, saver_1.SaveManager])
    ], CombatService);
    return CombatService;
}());
exports.CombatService = CombatService;
//# sourceMappingURL=data:application/json;base64,